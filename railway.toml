[build]
builder = "nixpacks"
buildCommand = "cd backend && pip install -r requirements.txt"

[deploy]
startCommand = "cd backend && python -m gunicorn --bind 0.0.0.0:$PORT src.main:app"
healthcheckPath = "/api/health"
healthcheckTimeout = 300
restartPolicyType = "on_failure"
restartPolicyMaxRetries = 3

[environments.production]
[environments.production.variables]
FLASK_ENV = "production"
FLASK_DEBUG = "false"
SECRET_KEY = "${{SECRET_KEY}}"

# Database Configuration
DATABASE_URL = "${{Postgres.DATABASE_URL}}"

# Stripe Configuration
STRIPE_PUBLIC_KEY = "${{STRIPE_PUBLIC_KEY}}"
STRIPE_SECRET_KEY = "${{STRIPE_SECRET_KEY}}"
STRIPE_WEBHOOK_SECRET = "${{STRIPE_WEBHOOK_SECRET}}"

# AI API Keys
OPENAI_API_KEY = "${{OPENAI_API_KEY}}"
ANTHROPIC_API_KEY = "${{ANTHROPIC_API_KEY}}"
GROQ_API_KEY = "${{GROQ_API_KEY}}"
PERPLEXITY_API_KEY = "${{PERPLEXITY_API_KEY}}"
XAI_API_KEY = "${{XAI_API_KEY}}"
GOOGLE_API_KEY = "${{GOOGLE_API_KEY}}"
GEMINI_API_KEY = "${{GEMINI_API_KEY}}"

# Search API Keys
BING_SEARCH_API_KEY = "${{BING_SEARCH_API_KEY}}"
SERPER_API_KEY = "${{SERPER_API_KEY}}"
TAVILY_API_KEY = "${{TAVILY_API_KEY}}"
HUGGINGFACE_TOKEN = "${{HUGGINGFACE_TOKEN}}"

# OAuth Configuration
GITHUB_TOKEN = "${{GITHUB_TOKEN}}"
GITHUB_CLIENT_ID = "${{GITHUB_CLIENT_ID}}"
GOOGLE_CLIENT_ID = "${{GOOGLE_CLIENT_ID}}"
GOOGLE_CLIENT_SECRET = "${{GOOGLE_CLIENT_SECRET}}"

[environments.development]
[environments.development.variables]
FLASK_ENV = "development"
FLASK_DEBUG = "true"
SECRET_KEY = "${{DEV_SECRET_KEY}}"

# Development Database (SQLite)
DATABASE_URL = "sqlite:///biped_dev.db"

# Development Stripe (Test Keys)
STRIPE_PUBLIC_KEY = "${{STRIPE_TEST_PUBLIC_KEY}}"
STRIPE_SECRET_KEY = "${{STRIPE_TEST_SECRET_KEY}}"

[services]
[services.postgres]
image = "postgres:15"
variables = [
  "POSTGRES_DB=biped_production",
  "POSTGRES_USER=biped_user",
  "POSTGRES_PASSWORD=${{POSTGRES_PASSWORD}}"
]

[services.redis]
image = "redis:7-alpine"
variables = []

# Static file serving
[[services.static]]
name = "static"
source = "backend/src/static"
destination = "/static"

# Health check configuration
[healthcheck]
path = "/api/health"
interval = 30
timeout = 10
retries = 3

# Scaling configuration
[scaling]
minReplicas = 1
maxReplicas = 10
targetCPU = 70
targetMemory = 80

# Networking
[networking]
allowedOrigins = ["*"]
corsEnabled = true

# Logging
[logging]
level = "info"
format = "json"

# Monitoring
[monitoring]
enabled = true
metricsPath = "/api/analytics/metrics/current"

# Backup configuration
[backup]
enabled = true
schedule = "0 2 * * *"  # Daily at 2 AM
retention = "30d"

# Security
[security]
httpsOnly = true
hsts = true
contentSecurityPolicy = "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://cdnjs.cloudflare.com https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com https://cdnjs.cloudflare.com; img-src 'self' data: https:; connect-src 'self' https:;"

# Performance
[performance]
gzipEnabled = true
cacheControl = "public, max-age=31536000"
staticFilesCaching = true

# Environment-specific overrides
[environments.staging]
[environments.staging.variables]
FLASK_ENV = "staging"
FLASK_DEBUG = "false"
SECRET_KEY = "${{STAGING_SECRET_KEY}}"

[environments.staging.scaling]
minReplicas = 1
maxReplicas = 3

