backend/src/main_minimal.py:    secret_key = os.environ.get("SECRET_KEY")
backend/src/main_minimal.py:            secret_key = secrets.token_hex(32)
backend/src/main_minimal.py:    app.config["SECRET_KEY"] = secret_key
backend/src/routes/integrations.py:WEBHOOK_SECRET = "biped-webhook-secret-2025"
backend/src/routes/payment.py:        endpoint_secret = os.getenv("STRIPE_WEBHOOK_SECRET")
backend/src/main.py:    secret_key = os.environ.get("SECRET_KEY")
backend/src/main.py:            secret_key = secrets.token_hex(32)
backend/src/main.py:    app.config["SECRET_KEY"] = secret_key
backend/src/main.py:    jwt_secret_key = os.environ.get("JWT_SECRET_KEY", secret_key)
backend/src/main.py:    app.config["JWT_SECRET_KEY"] = jwt_secret_key
backend/src/utils/config.py:            base_secret = os.getenv("SECRET_KEY")
backend/src/utils/config.py:                base_secret = secrets.token_urlsafe(32)
backend/src/utils/config.py:                jwt_secret_key=os.getenv("JWT_SECRET_KEY", f"{base_secret}-jwt"),
backend/src/utils/security.py:        secret = pyotp.random_base32()
backend/src/utils/security.py:            f"2fa_setup:{user_id}", secret, ttl=600
backend/src/utils/security.py:        secret = self.redis_client.get_cache(f"2fa_setup:{user_id}")
backend/src/utils/security.py:        user_secret = self._get_user_2fa_secret(user_id)
backend/src/ai_test_server.py:    app.config["SECRET_KEY"] = secrets.token_hex(32)
backend/src/main_with_ai.py:    secret_key = os.environ.get("SECRET_KEY")
backend/src/main_with_ai.py:            secret_key = secrets.token_hex(32)
backend/src/main_with_ai.py:    app.config["SECRET_KEY"] = secret_key
